
<html>
<head>
    <title>The Log Analyser</title>
    <link rel="stylesheet" href="bower_components/bootstrap/dist/css/bootstrap.css">
    <style>
        .space {
            margin: 10px;
        }
    </style>
</head>
<body>

<div class="container">
    <div class="jumbotron">
        <h1>Log Analyser</h1>
    </div>
    <div class="" id="fileReader">
        <div class="row panel" id="keywords">

        </div>

        <div class="row">
        <div class="col-lg-4">
            <input class="btn btn-default" class="input-control" type="file" id="fileInput">
        </div>

        <div class="col-lg-4">
            <button class="btn btn-default" type="submit" name="button" id="next">Next</button>
        </div>

        <div class="col-lg-4" id="done">
            <button class="btn btn-primary" type="submit" name="button" id="done">Done Highlighting</button>
        </div></div>

    <div class="panel" id="fileDisplayArea">
    </div>

</div>
</div>

<div id="chart">
    <canvas id="myChart" width="1000" height="400"></canvas>
    <div class="time_axis"> ------------->   Time (secs)</div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/superagent/1.2.0/superagent.js"></script>
<script src="bower_components/Chart.js/Chart.js"></script>
<script src="bower_components/axios/dist/axios.js"></script>
<script>
    window.onload = function () {
        var fileInput = document.getElementById('fileInput');
        var fileDisplayArea = document.getElementById('fileDisplayArea');
        var done = document.getElementById('done');
        var fileReader = document.getElementById('fileReader');
        var chart = document.getElementById('chart');

        chart.style.display = "none";

        fileInput.addEventListener('change', function (e) {
            var file = fileInput.files[0];
            var reader = new FileReader();

            console.log(file);

            reader.onload = function (e) {
                console.log(e);
                fileDisplayArea.innerHTML = e.target.result;
                fileDisplayArea.innerHTML = e.target.result.split('\n')
                        .splice(0, 20)
                        .join("<br />");
            };

            reader.readAsText(file);

            var formData = new FormData();
            var files = fileInput.files;

            for(var key in files) {
                if (files.hasOwnProperty(key) && files[key] instanceof File) {
                    formData.append(key, files[key]);
                }
            }

            superagent
                    .post('http://192.168.0.100/data/upload')
                    .attach('file', file, file.name)
                    .end(function(err, res) {
                        console.log(err);
                        console.log(res);
                    });

        });

        var keywords = [];

        done.addEventListener('click', function (e) {

            if (keywords.length % 2 == 0) {

                superagent
                        .post('http://192.168.0.100/data')
                        .send({
                            file_name: fileInput.files[0].name,
                            data: keywords
                        })
                        .end(function (err, res) {
                            console.log(err, res);
                            fileReader.style.visibility = "hidden";
                            renderChart(res.body.data);
                        });
            } else {
                console.log('you');
            }


        });

        next.addEventListener('click', function (e) {
            var text = window.getSelection().toString();
            keywords.push(text);
            populateKeywordHTML();
        });


        function renderChart (array) {
            chart.style.visibility = "visible";
            chart.style.display = "block";

            // Get the context of the canvas element we want to select
            var ctx = document.getElementById("myChart").getContext("2d");
            var dataFromHBS = array;

            var arr = [];
            var d = [];

            var ChartData = {
                data: {
                    labels: arr,
                    datasets: [
                        {
                            label: "My First dataset",
                            fillColor: "rgba(220,220,220,0.2)",
                            strokeColor: "rgba(0,0,0,1)",
                            pointColor: "rgba(220,220,220,1)",
                            pointStrokeColor: "#fff",
                            pointHighlightFill: "#fff",
                            pointHighlightStroke: "rgba(220,220,220,1)",
                            data: d
                        }
//
                    ]
                },
                options: {

                    ///Boolean - Whether grid lines are shown across the chart
                    scaleShowGridLines: true,

                    //String - Colour of the grid lines
                    scaleGridLineColor: "rgba(0,0,0,.05)",

                    //Number - Width of the grid lines
                    scaleGridLineWidth: 1,

                    //Boolean - Whether to show horizontal lines (except X axis)
                    scaleShowHorizontalLines: true,

                    //Boolean - Whether to show vertical lines (except Y axis)
                    scaleShowVerticalLines: true,

                    //Boolean - Whether the line is curved between points
                    bezierCurve: true,

                    //Number - Tension of the bezier curve between points
                    bezierCurveTension: 0.3,

                    //Boolean - Whether to show a dot for each point
                    pointDot: true,

                    //Number - Radius of each point dot in pixels
                    pointDotRadius: 4,

                    //Number - Pixel width of point dot stroke
                    pointDotStrokeWidth: 1,

                    //Number - amount extra to add to the radius to cater for hit detection outside the drawn point
                    pointHitDetectionRadius: 20,

                    //Boolean - Whether to show a stroke for datasets
                    datasetStroke: true,

                    //Number - Pixel width of dataset stroke
                    datasetStrokeWidth: 2,

                    //Boolean - Whether to fill the dataset with a colour
                    datasetFill: true,

                    //String - A legend template
                    legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].strokeColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>"

                }
            };


            var data = dataFromHBS;
            console.log(data);
            //plots.time1 = data;
            for (var key in data) {
                arr.push(key);
            }

            for (var key in data) {
                d.push(data[key]);
            }
            ChartData.data.datasets[0].data = d;
            var myLineChart = new Chart(ctx).Line(ChartData.data, ChartData.options);

        }

        function populateKeywordHTML () {
            var keywordsArea = document.getElementById("keywords");
            var i = 0;
            keywordsArea.innerHTML = "";
            keywords.map(function (key) {
                i++;
                var div = document.createElement("div");
                div.classList.add("label");
                div.classList.add("label-default");
                div.classList.add("space");
                div.innerHTML = key;

                if (i % 2 == 0) {
                    var br = document.createElement("br");
                    div.appendChild(br);
                }

                keywordsArea.appendChild(div);
            })
        }

    }
</script>
</body>
</html>
